git-reflow
==========
Reflow is a no bullshit git workflow designed to help you maintain quality and get things done.

== Benefits:
* Reduce risks of improper merges.
* Enforce quality standards on all of your code.
* Save minutes every day that add up to hours of more productive time.
* Stop worrying about how to deliver your code and just do it.
* The last git workflow you'll ever need.
  Covers 90% of your needs without junk you'll never use.

== Guiding principles:
* You should already know what you're doing.
  We assume you know how to use git.

* The master branch is the codebase.
  You don't need multiple branches of code actually want to use.

* Master should remain stable at all times.
  The entire team depends on it.

* No direct commits to master.
  All work happens in feature branches. From a single commit to hundreds.

* All feature branches are reviewed via pull requests.

* Looks Good To Me. All feature branches require approval (even from yourself)
  We look for the string 'LGTM' in a comment on the pull request to know it's ready to merge.

* If you make a new commit in your branch, you require another review.

* All participants in a pull request must approve the pull request.
  If 2 guys comment, you need 2 'LGTM's before the code is ready to merge.

* Once approved, your feature branch is squash merged to master.
  This makes the history of the master branch extremely clean and easy to follow.

* Git blame becomes your friend. You'll know who to blame and can see the full context of changes.
  Squash commits to master mean every commit represents the whole feature, not a "typo fix".



How it works
-------------
`$ git reflow setup`
  Sets up your Github credentials

`$ git reflow start branch-name`
  Creates new branch
  Prompts for PT ticket numbers? (Keep the PT stuff as a plugin?)

`$ git reflow review [branch]`
  Assumes remote 'origin'
  Performs the following against [branch] or master if branch is not specified:
    `git fetch origin`
    - Are we up-to-date with changes from the destination?
      - Fail with "origin/[branch] has newer changes" if no
    - Run the test suite
      - If fails, do not continue
      - If not configured, fail with "Run test suite then use flag --green"
    `git push origin current-branch` # Updates remote branch
    - Do we have pull request?
      - if no, create it and print "Pull request created at http://pull-url/"

`$ git reflow deliver [branch]`
    - Do we have lgtm after last commit?
      - If no, print "Still waiting for review" (Maybe provide a way to skip this with `--lgtm`?)
    - Prompt "Accepted by:" and get name/email/github username of person who does acceptance
    - Checkout destination branch
    - Update destination from origin (`git pull origin [branch]`)
    - Merge squashed (`git merge --squash branch-name`)
    - Prepare commit message (Adds Closes #pull-request-number)
    - Perform the commit
    - Push to branch
    - Delete the remote branch
    - Delete the local branch
    - Deploy (Maybe with flag `--deploy`)
